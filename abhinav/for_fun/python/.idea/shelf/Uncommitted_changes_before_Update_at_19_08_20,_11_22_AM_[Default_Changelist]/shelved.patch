Index: ../../../../../Python_Codes/Snake/SnakeGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pickle\nimport pygame\nfrom pygame.locals import *\nimport random\nimport sys\n\nwhile True:\n\n    clock = pygame.time.Clock()\n\n    width = 500\n    height = 500\n\n    blue = (255, 255, 125)\n    yellow = (184, 255, 203)\n    darkYellow = (100, 255, 100)\n    red = (255, 150, 150)\n\n    gameOver = False\n    new_highscore = False\n    restart = False\n\n    win = pygame.display.set_mode((width, height))\n    win.fill((255, 255, 255))\n\n\n    class Coordinate:\n\n        def __init__(self, x, y):\n            self.x = int(x)\n            self.y = int(y)\n\n        def Coordinate(self, x, y):\n            self.x = int(x)\n            self.y = int(y)\n\n        def Position(self):\n            return self.x, self.y, 25, 25\n\n\n    class SnakeBlock:\n\n        def __init__(self):\n            self.position = Coordinate(0, 0)\n\n        def updateSnakeBlock(self):\n            pygame.draw.rect(win, yellow, self.position.Position())\n\n\n    class Snake:\n\n        def __init__(self):\n\n            self.side = 25\n            self.headPosition = Coordinate(self.side * 9, self.side * 9)\n            self.velocityX = 1\n            self.velocityY = 0\n            self.score = 0\n\n            self.snake = []\n            self.timestampsX = []\n            self.timestampsY = []\n\n        def updateSnake(self):\n\n            snakeBlocksDrawn = 0\n\n            self.timestampsX.append(self.headPosition.x)\n            self.timestampsY.append(self.headPosition.y)\n\n            self.headPosition.x += self.velocityX * self.side\n            self.headPosition.y += self.velocityY * self.side\n\n            if len(self.timestampsX) > 400:\n                self.timestampsX.pop(0)\n                self.timestampsY.pop(0)\n\n            while snakeBlocksDrawn < len(self.snake):\n                self.snake[snakeBlocksDrawn].position.Coordinate(self.timestampsX[-(snakeBlocksDrawn + 1)],\n                                                                 self.timestampsY[-(snakeBlocksDrawn + 1)])\n                self.snake[snakeBlocksDrawn].updateSnakeBlock()\n\n                snakeBlocksDrawn += 1\n\n            pygame.draw.rect(win, darkYellow, self.headPosition.Position())\n\n            pygame.display.set_caption(\"Score:{}\".format(self.score))\n\n            pygame.display.update()\n\n        def die(self):\n\n            global gameOver\n\n            snakeBlocksChecked = 0\n\n            if self.headPosition.x < 0:\n\n                self.headPosition.x = self.side * 19\n\n            elif self.headPosition.x + self.side > width:\n\n                self.headPosition.x = 0\n\n            elif self.headPosition.y < 0:\n\n                self.headPosition.y = self.side * 19\n\n            elif self.headPosition.y + self.side > height:\n\n                self.headPosition.y = 0\n\n            while snakeBlocksChecked < len(self.snake):\n\n                if (self.snake[snakeBlocksChecked].position.x == self.headPosition.x) and (\n                        self.snake[snakeBlocksChecked].position.y == self.headPosition.y):\n\n                    gameOver = True\n                    break\n\n                else:\n                    snakeBlocksChecked += 1\n\n\n    snake = Snake()\n\n\n    class Food:\n\n        def __init__(self):\n\n            self.poweredUP = False\n            self.side = 25\n            self.Position = Coordinate(random.randint(0, 19) * self.side, random.randint(0, 19) * self.side)\n\n        def UpdatePos(self):\n\n            global snake, red\n\n            ok = False\n            snakeBlocksChecked = 0\n\n            while not ok:\n\n                if (self.Position.x == snake.headPosition.x) and (self.Position.y == snake.headPosition.y):\n\n                    chance = random.randint(1, 50)\n\n                    if self.poweredUP:\n\n                        snake.score += 10\n                        snake.snake.append(SnakeBlock())\n                        snake.snake.append(SnakeBlock())\n                        snake.snake.append(SnakeBlock())\n\n                    else:\n\n                        snake.score += 1\n                        snake.snake.append(SnakeBlock())\n\n                    self.poweredUP = False\n                    self.Position.Coordinate(random.randint(0, 19) * self.side, random.randint(0, 19) * self.side)\n\n                    if chance == 1:\n                        self.poweredUP = True\n\n                while snakeBlocksChecked < len(snake.snake):\n\n                    if (self.Position.x == snake.snake[snakeBlocksChecked].position.x) and (\n                            self.Position.y == snake.snake[snakeBlocksChecked].position.y):\n                        self.Position.Coordinate(random.randint(0, 19) * self.side, random.randint(0, 19) * self.side)\n                        break\n\n                    else:\n\n                        snakeBlocksChecked += 1\n\n                else:\n\n                    ok = True\n\n            win.fill((255, 255, 255))\n\n            if self.poweredUP:\n\n                pygame.draw.rect(win, blue, self.Position.Position())\n\n            else:\n\n                pygame.draw.rect(win, red, self.Position.Position())\n\n\n    apple = Food()\n\n    while not gameOver:\n\n        clock.tick(10)\n\n        for event in pygame.event.get():\n\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n\n        keys = pygame.key.get_pressed()\n\n        if (keys[pygame.K_w] or keys[K_UP]) and snake.velocityY == 0:\n            snake.velocityX = 0\n            snake.velocityY = -1\n\n        if (keys[pygame.K_a] or keys[K_LEFT]) and snake.velocityX == 0:\n            snake.velocityX = -1\n            snake.velocityY = 0\n\n        if (keys[pygame.K_s] or keys[K_DOWN]) and snake.velocityY == 0:\n            snake.velocityX = 0\n            snake.velocityY = 1\n\n        if (keys[pygame.K_d] or keys[K_RIGHT]) and snake.velocityX == 0:\n            snake.velocityX = 1\n            snake.velocityY = 0\n\n        apple.UpdatePos()\n        snake.updateSnake()\n        snake.die()\n\n    try:\n\n        with open('score.dat', 'rb') as file:\n            highscore = pickle.load(file)\n\n    except:\n\n        highscore = 0\n\n    if highscore < snake.score:\n\n        highscore = snake.score\n        new_highscore = True\n\n    elif highscore >= snake.score:\n\n        new_highscore = False\n\n    with open('score.dat', 'wb') as file:\n        pickle.dump(highscore, file)\n\n    if not new_highscore:\n\n        pygame.display.set_caption(\n            \"Game Over (score: {}, highscore: {}) *press enter to restart*\".format(snake.score, highscore))\n\n    else:\n\n        pygame.display.set_caption(\n            \"Game Over (score: {}, highscore: {} [NEW HIGHSCORE!])\".format(snake.score, highscore))\n\n    while not restart:\n\n        keys = pygame.key.get_pressed()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n\n        if keys[K_ESCAPE]:\n            pygame.quit()\n            sys.exit()\n\n        if keys[pygame.K_RETURN]:\n            restart = True\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../../../../Python_Codes/Snake/SnakeGame.py	(revision aa266cc27158fc3c16dd1821b895717372eae6b8)
+++ ../../../../../Python_Codes/Snake/SnakeGame.py	(date 1597761741547)
@@ -3,6 +3,7 @@
 from pygame.locals import *
 import random
 import sys
+pygame.init()
 
 while True:
 
Index: ../../../../../Python_Codes/Snake/Snake_1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\nimport random as rand\nimport time\nfrom pygame.locals import *\n\npygame.init()\n\n#                                             ------------Variables------------\n\nw = 500\nh = w\nwin = pygame.display.set_mode((w, h))\nclock = pygame.time.Clock()\n\n\n#                                             ------------Variables------------\n\n#                                             ------------Functions------------\n\ndef stop():\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            exit()\n        if event.type == KEYDOWN:\n            if event.key == K_ESCAPE:\n                exit()\n\n\n#                                             ------------Functions------------\n\n#                                             -------------Classes-------------\n\nclass Snake:\n    def __init__(self):\n        self.x = rand.randint(0, w)\n        self.y = rand.randint(0, h)\n        self.length = 10\n        self.size = 20\n        self.list = []\n        self.direction = 'right'\n        for i in range(self.length):\n            self.list.append([self.x - self.size * i, self.y])\n\n    def draw(self):\n        pygame.display.update()\n        win.fill((255, 255, 255))\n        for i in range(self.length):\n            pygame.draw.rect(win, (0, 0, 0), (self.list[i][0], self.list[i][1], self.size, self.size))\n\n    def move(self):\n        self.change_direction()\n        if self.direction == 'right':\n            self.list[-1][0] += self.size\n        if self.direction == 'left':\n            self.list[-1][0] -= self.size\n        if self.direction == 'up':\n            self.list[-1][1] -= self.size\n        if self.direction == 'down':\n            self.list[-1][1] += self.size\n\n        for i in range(self.length -1):\n            self.list[i][0] = self.list[i + 1][0]\n            self.list[i][1] = self.list[i + 1][1]\n\n    def change_direction(self):\n        keys = pygame.key.get_pressed()\n        if keys[K_UP] and self.direction != 'down':\n            self.direction = 'up'\n        if keys[K_RIGHT] and self.direction != 'left':\n            self.direction = 'right'\n        if keys[K_LEFT] and self.direction != 'right':\n            self.direction = 'left'\n        if keys[K_DOWN] and self.direction != 'up':\n            self.direction = 'down'\n\n\n#                                             -------------Classes-------------\n\n\nsnake = Snake()\nwhile True:\n    snake.move()\n    snake.draw()\n    clock.tick(10)\n\n    stop()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../../../../Python_Codes/Snake/Snake_1.py	(revision aa266cc27158fc3c16dd1821b895717372eae6b8)
+++ ../../../../../Python_Codes/Snake/Snake_1.py	(date 1597761421175)
@@ -7,9 +7,11 @@
 
 #                                             ------------Variables------------
 
-w = 500
+w = 700
 h = w
 win = pygame.display.set_mode((w, h))
+griding = [i * 20 for i in range(1, w//20)]
+print(griding)
 clock = pygame.time.Clock()
 
 
@@ -32,10 +34,13 @@
 
 class Snake:
     def __init__(self):
-        self.x = rand.randint(0, w)
+        self.size = 20
         self.y = rand.randint(0, h)
+        self.x = rand.randint(0, w)
+        while not self.x % w//self.size == 0:
+            self.x = rand.randint(self.size, w-self.size)
+        print(self.x)
         self.length = 10
-        self.size = 20
         self.list = []
         self.direction = 'right'
         for i in range(self.length):
@@ -72,6 +77,10 @@
             self.direction = 'left'
         if keys[K_DOWN] and self.direction != 'up':
             self.direction = 'down'
+    def add(self):
+        self.length += 1
+        ran_cord = [self.list[0][0] -= self.size,self.list[0][1] ]
+        self.list.append()
 
 
 #                                             -------------Classes-------------
Index: ../../../../../Python_Codes/.idea/python_codes.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (pythonProject1)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"module\" module-name=\"python\" />\n  </component>\n  <component name=\"TestRunnerService\">\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../../../../Python_Codes/.idea/python_codes.iml	(revision aa266cc27158fc3c16dd1821b895717372eae6b8)
+++ ../../../../../Python_Codes/.idea/python_codes.iml	(date 1597750561049)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 (pythonProject1)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.5 (Python_Codes)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="python" />
   </component>
diff --git ../../../../../Python_Codes/Flappy_Bird/Flappy.py ../../../../../Python_Codes/Flappy_Bird/Flappy.py
new file mode 100644
